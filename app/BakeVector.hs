{-# LANGUAGE MagicHash, TemplateHaskell #-}

module BakeVector
  ( bake
  , unsafeFromPtrLen
  , rcon_vector
  ) where

import qualified Data.Vector.Storable as VS
import Foreign
import GHC.Exts
import Language.Haskell.TH
import Language.Haskell.TH.Syntax
import System.IO.Unsafe

-- | Bakes a given `Vector` into the binary.
bake :: Storable a => VS.Vector a -> Q (TExp (VS.Vector a))
bake xs = [||unsafeFromPtrLen $$(ptr) len||]
  where
    ptr = unsafeTExpCoerce [|Ptr $(litE $ StringPrimL $ VS.toList $ VS.unsafeCast xs)|]
    len = VS.length xs

unsafeFromPtrLen :: Storable a => Ptr a -> Int -> VS.Vector a
unsafeFromPtrLen ptr =
  VS.unsafeFromForeignPtr0 (unsafePerformIO (newForeignPtr_ ptr))
{-# NOINLINE unsafeFromPtrLen #-}

rcon_vector :: VS.Vector Word8
rcon_vector = VS.fromList [ 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40
            , 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a
            , 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a
            , 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39 
            , 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25
            , 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a
            , 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08
            , 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8 
            , 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6
            , 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef
            , 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61
            , 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc 
            , 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01
            , 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b 
            , 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e
            , 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3 
            , 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4
            , 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94 
            , 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8
            , 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20 
            , 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d
            , 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35 
            , 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91
            , 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f 
            , 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d
            , 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04 
            , 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c
            , 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63 
            , 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa
            , 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd 
            , 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66
            , 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]
